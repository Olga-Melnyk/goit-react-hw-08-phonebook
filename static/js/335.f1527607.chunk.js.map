{"version":3,"file":"static/js/335.f1527607.chunk.js","mappings":"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","sources":["components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const SpanContact = styled.span`\n  font-size: 20px;\n  font-weight: 400;\n  width: 180px;\n`;\n\nexport const NumberContact = styled('span')`\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  padding: 8px;\n  display: inline-flex;\n  font-size: 20px;\n  border: none;\n  background-color: #dc143c;\n  border-radius: 50%;\n  cursor: pointer;\n  color: white;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { deleteContact } from 'redux/operations';\n\nimport {\n  Item,\n  SpanContact,\n  NumberContact,\n  Button,\n} from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = async () => {\n    try {\n      await dispatch(deleteContact(contact.id));\n    } catch (error) {\n      Notify.failure('Something wrong. Please, try again');\n    }\n  };\n\n  return (\n    <Item>\n      <SpanContact>{contact.name}:</SpanContact>\n      <NumberContact>{contact.number}</NumberContact>\n      <Button type=\"button\" onClick={() => handleDelete(contact.id)}>\n        Delete\n      </Button>\n    </Item>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  list-style: none;\n`;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectContacts, selectFilter } from '../../redux/selectors';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\nimport { fetchContacts } from '../../redux/operations';\n\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const { filter } = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  if (!contacts) {\n    return null;\n  }\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.object,\n};\n","import styled from 'styled-components';\n\nexport const FilterBox = styled('div')`\n  display: flex;\n  gap: 20px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const FilterText = styled.p`\n  font-weight: 600;\n  font-size: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 10px 10px;\n  border: none;\n  font-size: 20px;\n  box-shadow: 0px 2px 18px 0px grey;\n  border-radius: 25px;\n  &:focus {\n    outline: none;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nimport { FilterBox, FilterText, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const name = e.target.value;\n    dispatch(setFilter(name));\n  };\n\n  return (\n    <FilterBox>\n      <FilterText>Find contacts by name</FilterText>\n      <FilterInput\n        type=\"text\"\n        autoComplete=\"off\"\n        onChange={handleChange}\n        name=\"name\"\n      />\n    </FilterBox>\n  );\n};\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const ContainerForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 250px;\n  gap: 30px;\n  padding: 40px;\n  border-radius: 15px;\n  backdrop-filter: blur(50px);\n  box-shadow: 0px 2px 8px 1px grey;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 20px;\n  width: 350px;\n  gap: 10px;\n`;\n\nexport const Input = styled(Field)`\n  padding: 10px 10px;\n  border: none;\n  font-size: 20px;\n  box-shadow: 0px 2px 18px 0px grey;\n  border-radius: 25px;\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const ErrorForm = styled(ErrorMessage)`\n  margin: 5px 0;\n  color: red;\n`;\n\nexport const FormBtn = styled.button`\n  padding: 15px 25px;\n  font-size: 20px;\n  border: none;\n  background-color: #f2e06c;\n  border-radius: 25px;\n  cursor: pointer;\n  color: white;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nimport {\n  ContainerForm,\n  Label,\n  Input,\n  ErrorForm,\n  FormBtn,\n} from './ContactForm.styled';\n\nconst RecipeSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      excludeEmptyString: true,\n    })\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      {\n        message:\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n        excludeEmptyString: true,\n      }\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, actions) => {\n    const addedContacts = contacts.filter(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (addedContacts.length) {\n      Notify.warning(`${values.name} is already in contacts`);\n    } else {\n      dispatch(addContact(values));\n      console.log(values);\n      actions.resetForm({\n        name: '',\n        number: '',\n      });\n    }\n  };\n\n  // const handleSubmit = (values, actions) => {\n  //   const addedContacts = contacts.filter(\n  //     contact => contact.name.toLowerCase() === values.name.toLowerCase()\n  //   );\n\n  //   if (addedContacts.length) {\n  //     Notify.warning(`${values.name} is already in contacts`);\n  //   } else {\n  //     dispatch(addContact(values));\n  //     console.log(values);\n  //     actions.resetForm({\n  //       name: '',\n  //       number: '',\n  //     });\n  //   }\n  // };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={RecipeSchema}\n      onSubmit={(values, actions) => {\n        handleSubmit(values, actions);\n      }}\n    >\n      <ContainerForm>\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <ErrorForm name=\"name\" component=\"span\" />\n        </Label>\n        <Label>\n          Number\n          <Input type=\"tel\" name=\"number\" />\n          <ErrorForm name=\"number\" component=\"span\" />\n        </Label>\n\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </ContainerForm>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.object,\n};\n","import styled from 'styled-components';\n\nexport const ContactsBox = styled('div')`\n  padding: 158px 60px 0;\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const ListBox = styled('div')`\n  gap: 30px;\n  padding: 40px;\n  border-radius: 15px;\n  backdrop-filter: blur(50px);\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 2px 8px 1px grey;\n  max-height: 600px;\n  overflow-y: auto;\n`;\n","import { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactsBox, ListBox } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <ContactsBox>\n      <ContactForm />\n      <ListBox>\n        <Filter />\n        <ContactList />\n      </ListBox>\n    </ContactsBox>\n  );\n};\nexport default Contacts;\n"],"names":["Item","styled","SpanContact","NumberContact","Button","ContactListItem","contact","dispatch","useDispatch","handleDelete","deleteContact","id","Notify","name","number","type","onClick","List","ContactList","contacts","useSelector","selectContacts","filter","selectFilter","useEffect","fetchContacts","visibleContacts","toLowerCase","includes","map","FilterBox","FilterText","FilterInput","Filter","autoComplete","onChange","e","target","value","setFilter","ContainerForm","Form","Label","Input","Field","ErrorForm","ErrorMessage","FormBtn","RecipeSchema","Yup","shape","matches","message","excludeEmptyString","required","ContactForm","initialValues","validationSchema","onSubmit","values","actions","length","addContact","console","log","resetForm","handleSubmit","component","ContactsBox","ListBox"],"sourceRoot":""}