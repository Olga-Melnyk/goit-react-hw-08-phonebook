{"version":3,"file":"static/js/335.dfa919e3.chunk.js","mappings":"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","sources":["components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  gap: 8px;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Span = styled.span`\n  font-size: 18px;\n  padding: 1px;\n`;\n\nexport const Button = styled.button`\n  padding: 1px 2px;\n  border: 1px solid black;\n  background-color: transparent;\n  font-size: 16px;\n  :hover {\n    scale: 1.05;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nimport { Item, Span, Button } from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n\n  return (\n    <Item>\n      <Span>\n        {contact.name}: <Span>{contact.phone}</Span>\n      </Span>\n      <Button type=\"button\" onClick={() => handleDelete(contact.id)}>\n        Delete\n      </Button>\n    </Item>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin-left: 25px;\n`;\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { ContactListItem } from '../ContactListItem/ContactListItem';\n\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n\n  if (!contacts) {\n    return null;\n  }\n\n  return (\n    <List>\n      {contacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n  input: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const FilterText = styled.p`\n  font-size: 18px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  margin-left: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  margin-left: 10px;\n  padding-left: 4px;\n  :hover {\n    scale: 1.05;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nimport { FilterText, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    e.preventDefault();\n    const name = e.target.value;\n    dispatch(setFilter(name));\n  };\n\n  return (\n    <div>\n      <FilterText>Find contacts by name</FilterText>\n      <FilterInput\n        type=\"text\"\n        autoComplete=\"off\"\n        onChange={handleChange}\n        name=\"name\"\n      />\n    </div>\n  );\n};\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const ContainerForm = styled(Form)`\n  width: 500px;\n  margin: 20px auto 20px 10px;\n  padding: 20px 10px;\n  border: 1px solid black;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: 18px;\n  font-weight: 500;\n  :not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  margin: 15px 0 0 15px;\n  padding-left: 4px;\n  :hover {\n    scale: 1.05;\n  }\n`;\n\nexport const ErrorForm = styled(ErrorMessage)`\n  margin: 5px 0;\n  color: red;\n`;\n\nexport const FormBtn = styled.button`\n  margin: 0 auto;\n  padding: 5px 10px;\n  border: 1px solid black;\n  background-color: transparent;\n  font-size: 18px;\n  :hover {\n    scale: 1.05;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nimport {\n  ContainerForm,\n  Label,\n  Input,\n  ErrorForm,\n  FormBtn,\n} from './ContactForm.styled';\n\nconst RecipeSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      excludeEmptyString: true,\n    })\n    .required('Required'),\n  phone: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      {\n        message:\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n        excludeEmptyString: true,\n      }\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const initialValues = {\n    name: '',\n    phone: '',\n  };\n\n  const handleSubmit = (values, actions) => {\n    const addedContacts = contacts.filter(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n\n    if (addedContacts.length) {\n      alert(`${values.name} is already in contacts`);\n    } else {\n      dispatch(addContact(values));\n      console.log(values);\n      actions.resetForm({\n        name: '',\n        phone: '',\n      });\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={RecipeSchema}\n      onSubmit={(values, actions) => {\n        handleSubmit(values, actions);\n      }}\n    >\n      <ContainerForm>\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <ErrorForm name=\"name\" component=\"span\" />\n        </Label>\n        <Label>\n          Number\n          <Input type=\"tel\" name=\"phone\" />\n          <ErrorForm name=\"phone\" component=\"span\" />\n        </Label>\n\n        <FormBtn type=\"submit\">Add contact</FormBtn>\n      </ContainerForm>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.object,\n};\n","import styled from 'styled-components';\n\nexport const ContactsBox = styled('div')`\n  padding: 158px 60px 0;\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const ListBox = styled('div')`\n  gap: 30px;\n  padding: 40px;\n  border-radius: 15px;\n  backdrop-filter: blur(50px);\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 2px 8px 1px grey;\n  max-height: 600px;\n  overflow-y: auto;\n`;\n","import { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { ContactsBox, ListBox } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <ContactsBox>\n      <ContactForm />\n      <ListBox>\n        <Filter />\n        <ContactList />\n      </ListBox>\n    </ContactsBox>\n  );\n};\nexport default Contacts;\n"],"names":["Item","styled","Span","Button","ContactListItem","contact","dispatch","useDispatch","name","phone","type","onClick","id","deleteContact","List","ContactList","contacts","useSelector","selectContacts","map","FilterText","FilterInput","Filter","autoComplete","onChange","e","preventDefault","target","value","setFilter","ContainerForm","Form","Label","Input","Field","ErrorForm","ErrorMessage","FormBtn","RecipeSchema","Yup","shape","matches","message","excludeEmptyString","required","ContactForm","initialValues","validationSchema","onSubmit","values","actions","filter","toLowerCase","length","alert","addContact","console","log","resetForm","handleSubmit","component","ContactsBox","ListBox"],"sourceRoot":""}